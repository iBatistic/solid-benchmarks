/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       pointVectorField;
    object      pointD;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    left
    {
        //type            symmetry;
        type            pointFixedDisplacementZeroShear;
        value           uniform (0 0 0);
    }
    right
    {
        // type            pointSolidTraction;
        // traction        uniform ( 1e6 0 0 );
        // pressure        uniform 0;
        // value           uniform (0 0 0);
        type            pointAnalyticalPlateHoleTraction;
        farFieldTractionX 1e6;
        holeRadius      0.5;
        value           uniform (0 0 0);
    }
    down
    {
        // type            symmetry;
        type            pointFixedDisplacementZeroShear;
        value           uniform (0 0 0);
    }
    up
    {
        // type            pointSolidTraction;
        // traction        uniform ( 0 0 0 );
        // pressure        uniform 0;
        // value           uniform (0 0 0);
        type            pointAnalyticalPlateHoleTraction;
        farFieldTractionX 1e6;
        holeRadius      0.5;
        value           uniform (0 0 0);
    }
    hole
    {
        type            pointSolidTraction;
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
        // type            pointAnalyticalPlateHoleTraction;
        // farFieldTractionX 1e6;
        // holeRadius      0.5;
        // value           uniform (0 0 0);
    }
    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
