/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com, and owner of the OPENFOAM® and OpenCFD®      |
|              trade marks.                                                   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      DD;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{

    r_bottom
    {
        type            solidContact;
        master          no;
        shadowPatch     bottom_contact;
        value           uniform (0 0 0);
    }
    R_top
    {
        type            solidContact;
        master          no;
        shadowPatch     top_contact;
        value           uniform (0 0 0);
    }
    r_top
    {
        type            solidContact;
        master          no;
        shadowPatch     R_bottom;
        value           uniform (0 0 0);
    }
    sym4
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    sym5
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    sym6
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    sym1
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    sym2
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    sym3
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }
    disp
    {
        type            fixedDisplacement;
        displacementSeries
        {
            "file|fileName"        "$FOAM_CASE/constant/timeVsDisp";
            outOfBounds     clamp;
        }
        value           uniform (0 0 0);
    }
    fixed
    {
        type            fixedDisplacement;
        value           uniform (0 0 0);
    }
    free
    {
        type            solidTraction;
        gradient        uniform ( 0 0 0 );
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
    }
    bottom_contact
    {
        type            solidContact;
        master          yes;
        shadowPatch     r_bottom;
        rigidMaster           yes;
        useNewPointDistanceMethod no;
        usePrevCandidateMasterNeighbors no;
        writePointDistanceFields false;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            penaltyScale     5;
            relaxationFactor 0.005;
        }
        frictionContactModel frictionless;
        value           uniform (0 0 0);
    }
    top_contact
    {
        type            solidContact;
        master          yes;
        shadowPatch     R_top;
        rigidMaster     yes;
        useNewPointDistanceMethod no;
        usePrevCandidateMasterNeighbors no;
        writePointDistanceFields false;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            penaltyScale     5;
            relaxationFactor 0.005;
        }
        frictionContactModel frictionless;
        value           uniform (0 0 0);
    }
    R_bottom
    {
        type            solidContact;
        master          yes;
        rigidMaster     no;
        shadowPatch     r_top;
        useNewPointDistanceMethod no;
        usePrevCandidateMasterNeighbors no;
        writePointDistanceFields false;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            penaltyScale    2;
            relaxationFactor 0.005;
        }
        frictionContactModel standardPenalty;
        standardPenaltyFrictionModelDict
        {
            relaxationFactor 0.005;
            penaltyScale     1.5;
            frictionLaw     coulomb;
            frictionLawDict
            {
                frictionCoeff   0.5;
            }
        }
        value           uniform (0 0 0);
    }

}


// ************************************************************************* //
